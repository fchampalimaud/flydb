# Generated by Django 2.0.1 on 2018-01-17 16:02

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AclframeworkAcltemplate',
            fields=[
                ('acltemplate_id', models.AutoField(primary_key=True, serialize=False)),
                ('acltemplate_table_id', models.IntegerField()),
                ('acltemplate_permissions', models.IntegerField()),
                ('acltemplate_read', models.IntegerField()),
                ('acltemplate_update', models.IntegerField()),
                ('acltemplate_delete', models.IntegerField()),
                ('acltemplate_nread', models.IntegerField()),
                ('acltemplate_nupdate', models.IntegerField()),
                ('acltemplate_ndelete', models.IntegerField()),
                ('group_id', models.IntegerField()),
                ('applyto_id', models.IntegerField()),
            ],
            options={
                'db_table': 'aclframework_acltemplate',
            },
        ),
        migrations.CreateModel(
            name='AdminToolsDashboardPreferences',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
                ('data', models.TextField()),
                ('dashboard_id', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'admin_tools_dashboard_preferences',
            },
        ),
        migrations.CreateModel(
            name='AdminToolsMenuBookmark',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
                ('url', models.CharField(max_length=255)),
                ('title', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'admin_tools_menu_bookmark',
            },
        ),
        migrations.CreateModel(
            name='CmsCmsplugin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language', models.CharField(max_length=15)),
                ('position', models.SmallIntegerField(blank=True, null=True)),
                ('creation_date', models.DateTimeField()),
                ('plugin_type', models.CharField(max_length=50)),
                ('parent_id', models.IntegerField(blank=True, null=True)),
                ('tree_id', models.PositiveIntegerField()),
                ('lft', models.PositiveIntegerField()),
                ('rght', models.PositiveIntegerField()),
                ('level', models.PositiveIntegerField()),
                ('placeholder_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'cms_cmsplugin',
            },
        ),
        migrations.CreateModel(
            name='CmsGlobalpagepermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('can_publish', models.IntegerField()),
                ('group_id', models.IntegerField(blank=True, null=True)),
                ('can_moderate', models.IntegerField()),
                ('can_change', models.IntegerField()),
                ('can_change_permissions', models.IntegerField()),
                ('can_recover_page', models.IntegerField()),
                ('can_add', models.IntegerField()),
                ('user_id', models.IntegerField(blank=True, null=True)),
                ('can_delete', models.IntegerField()),
                ('can_move_page', models.IntegerField()),
                ('can_change_advanced_settings', models.IntegerField()),
                ('can_view', models.IntegerField()),
            ],
            options={
                'db_table': 'cms_globalpagepermission',
            },
        ),
        migrations.CreateModel(
            name='CmsGlobalpagepermissionSites',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('globalpagepermission_id', models.IntegerField()),
                ('site_id', models.IntegerField()),
            ],
            options={
                'db_table': 'cms_globalpagepermission_sites',
            },
        ),
        migrations.CreateModel(
            name='CmsPage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rght', models.PositiveIntegerField()),
                ('level', models.PositiveIntegerField()),
                ('navigation_extenders', models.CharField(blank=True, max_length=80, null=True)),
                ('parent_id', models.IntegerField(blank=True, null=True)),
                ('reverse_id', models.CharField(blank=True, max_length=40, null=True)),
                ('login_required', models.IntegerField()),
                ('soft_root', models.IntegerField()),
                ('creation_date', models.DateTimeField()),
                ('lft', models.PositiveIntegerField()),
                ('publication_end_date', models.DateTimeField(blank=True, null=True)),
                ('template', models.CharField(max_length=100)),
                ('tree_id', models.PositiveIntegerField()),
                ('publication_date', models.DateTimeField(blank=True, null=True)),
                ('in_navigation', models.IntegerField()),
                ('moderator_state', models.SmallIntegerField()),
                ('published', models.IntegerField()),
                ('site_id', models.IntegerField()),
                ('changed_by', models.CharField(max_length=70)),
                ('created_by', models.CharField(max_length=70)),
                ('publisher_is_draft', models.IntegerField()),
                ('publisher_state', models.SmallIntegerField()),
                ('publisher_public_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('limit_visibility_in_menu', models.SmallIntegerField(blank=True, null=True)),
                ('changed_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'cms_page',
            },
        ),
        migrations.CreateModel(
            name='CmsPagemoderator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('moderate_page', models.IntegerField()),
                ('moderate_children', models.IntegerField()),
                ('page_id', models.IntegerField()),
                ('user_id', models.IntegerField()),
                ('moderate_descendants', models.IntegerField()),
            ],
            options={
                'db_table': 'cms_pagemoderator',
            },
        ),
        migrations.CreateModel(
            name='CmsPagemoderatorstate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField()),
                ('page_id', models.IntegerField()),
                ('user_id', models.IntegerField(blank=True, null=True)),
                ('action', models.CharField(blank=True, max_length=3, null=True)),
                ('message', models.TextField()),
            ],
            options={
                'db_table': 'cms_pagemoderatorstate',
            },
        ),
        migrations.CreateModel(
            name='CmsPagepermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_id', models.IntegerField(blank=True, null=True)),
                ('can_publish', models.IntegerField()),
                ('page_id', models.IntegerField(blank=True, null=True)),
                ('user_id', models.IntegerField(blank=True, null=True)),
                ('can_delete', models.IntegerField()),
                ('can_change_permissions', models.IntegerField()),
                ('can_moderate', models.IntegerField()),
                ('can_add', models.IntegerField()),
                ('grant_on', models.IntegerField()),
                ('can_move_page', models.IntegerField()),
                ('can_change', models.IntegerField()),
                ('can_change_advanced_settings', models.IntegerField()),
                ('can_view', models.IntegerField()),
            ],
            options={
                'db_table': 'cms_pagepermission',
            },
        ),
        migrations.CreateModel(
            name='CmsPagePlaceholders',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page_id', models.IntegerField()),
                ('placeholder_id', models.IntegerField()),
            ],
            options={
                'db_table': 'cms_page_placeholders',
            },
        ),
        migrations.CreateModel(
            name='CmsPageuser',
            fields=[
                ('user_ptr_id', models.IntegerField(primary_key=True, serialize=False)),
                ('created_by_id', models.IntegerField()),
            ],
            options={
                'db_table': 'cms_pageuser',
            },
        ),
        migrations.CreateModel(
            name='CmsPageusergroup',
            fields=[
                ('group_ptr_id', models.IntegerField(primary_key=True, serialize=False)),
                ('created_by_id', models.IntegerField()),
            ],
            options={
                'db_table': 'cms_pageusergroup',
            },
        ),
        migrations.CreateModel(
            name='CmsPlaceholder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slot', models.CharField(max_length=50)),
                ('default_width', models.PositiveSmallIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'cms_placeholder',
            },
        ),
        migrations.CreateModel(
            name='CmspluginFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cmsplugin_ptr_id', models.IntegerField(unique=True)),
                ('file', models.CharField(max_length=100)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'cmsplugin_file',
            },
        ),
        migrations.CreateModel(
            name='CmspluginFlash',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('width', models.CharField(max_length=6)),
                ('cmsplugin_ptr_id', models.IntegerField(unique=True)),
                ('file', models.CharField(max_length=100)),
                ('height', models.CharField(max_length=6)),
            ],
            options={
                'db_table': 'cmsplugin_flash',
            },
        ),
        migrations.CreateModel(
            name='CmspluginGooglemap',
            fields=[
                ('city', models.CharField(max_length=100)),
                ('title', models.CharField(blank=True, max_length=100, null=True)),
                ('cmsplugin_ptr_id', models.IntegerField(primary_key=True, serialize=False)),
                ('zoom', models.IntegerField(blank=True, null=True)),
                ('content', models.CharField(blank=True, max_length=255, null=True)),
                ('address', models.CharField(max_length=150)),
                ('zipcode', models.CharField(max_length=30)),
                ('lng', models.DecimalField(blank=True, decimal_places=6, max_digits=10, null=True)),
                ('lat', models.DecimalField(blank=True, decimal_places=6, max_digits=10, null=True)),
                ('route_planer', models.IntegerField()),
                ('route_planer_title', models.CharField(blank=True, max_length=150, null=True)),
            ],
            options={
                'db_table': 'cmsplugin_googlemap',
            },
        ),
        migrations.CreateModel(
            name='CmspluginLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(blank=True, max_length=200, null=True)),
                ('cmsplugin_ptr_id', models.IntegerField(unique=True)),
                ('name', models.CharField(max_length=256)),
                ('page_link_id', models.IntegerField(blank=True, null=True)),
                ('mailto', models.CharField(blank=True, max_length=75, null=True)),
            ],
            options={
                'db_table': 'cmsplugin_link',
            },
        ),
        migrations.CreateModel(
            name='CmspluginPicture',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(blank=True, max_length=255, null=True)),
                ('image', models.CharField(max_length=100)),
                ('cmsplugin_ptr_id', models.IntegerField(unique=True)),
                ('alt', models.CharField(blank=True, max_length=255, null=True)),
                ('page_link_id', models.IntegerField(blank=True, null=True)),
                ('float', models.CharField(blank=True, max_length=10, null=True)),
                ('longdesc', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'cmsplugin_picture',
            },
        ),
        migrations.CreateModel(
            name='CmspluginSnippetptr',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cmsplugin_ptr_id', models.IntegerField(unique=True)),
                ('snippet_id', models.IntegerField()),
            ],
            options={
                'db_table': 'cmsplugin_snippetptr',
            },
        ),
        migrations.CreateModel(
            name='CmspluginTeaser',
            fields=[
                ('description', models.TextField(blank=True, null=True)),
                ('title', models.CharField(max_length=255)),
                ('url', models.CharField(blank=True, max_length=255, null=True)),
                ('image', models.CharField(blank=True, max_length=100, null=True)),
                ('cmsplugin_ptr_id', models.IntegerField(primary_key=True, serialize=False)),
                ('page_link_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'cmsplugin_teaser',
            },
        ),
        migrations.CreateModel(
            name='CmspluginText',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.TextField()),
                ('cmsplugin_ptr_id', models.IntegerField(unique=True)),
            ],
            options={
                'db_table': 'cmsplugin_text',
            },
        ),
        migrations.CreateModel(
            name='CmspluginTwitterrecententries',
            fields=[
                ('cmsplugin_ptr_id', models.IntegerField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=75)),
                ('twitter_user', models.CharField(max_length=75)),
                ('count', models.PositiveSmallIntegerField()),
                ('link_hint', models.CharField(max_length=75)),
            ],
            options={
                'db_table': 'cmsplugin_twitterrecententries',
            },
        ),
        migrations.CreateModel(
            name='CmspluginTwittersearch',
            fields=[
                ('count', models.PositiveSmallIntegerField()),
                ('query', models.CharField(max_length=200)),
                ('cmsplugin_ptr_id', models.IntegerField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=75)),
            ],
            options={
                'db_table': 'cmsplugin_twittersearch',
            },
        ),
        migrations.CreateModel(
            name='CmspluginVideo',
            fields=[
                ('cmsplugin_ptr_id', models.IntegerField(primary_key=True, serialize=False)),
                ('movie', models.CharField(blank=True, max_length=100, null=True)),
                ('image', models.CharField(blank=True, max_length=100, null=True)),
                ('auto_play', models.IntegerField()),
                ('loop', models.IntegerField()),
                ('bgcolor', models.CharField(max_length=6)),
                ('fullscreen', models.IntegerField()),
                ('width', models.PositiveSmallIntegerField()),
                ('movie_url', models.CharField(blank=True, max_length=255, null=True)),
                ('buttonhighlightcolor', models.CharField(max_length=6)),
                ('auto_hide', models.IntegerField()),
                ('seekbarcolor', models.CharField(max_length=6)),
                ('buttonoutcolor', models.CharField(max_length=6)),
                ('textcolor', models.CharField(max_length=6)),
                ('seekbarbgcolor', models.CharField(max_length=6)),
                ('loadingbarcolor', models.CharField(max_length=6)),
                ('buttonovercolor', models.CharField(max_length=6)),
                ('height', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'cmsplugin_video',
            },
        ),
        migrations.CreateModel(
            name='CmsTitle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language', models.CharField(max_length=15)),
                ('title', models.CharField(max_length=255)),
                ('page_id', models.IntegerField()),
                ('path', models.CharField(max_length=255)),
                ('creation_date', models.DateTimeField()),
                ('slug', models.CharField(max_length=255)),
                ('has_url_overwrite', models.IntegerField()),
                ('application_urls', models.CharField(blank=True, max_length=200, null=True)),
                ('redirect', models.CharField(blank=True, max_length=255, null=True)),
                ('meta_keywords', models.CharField(blank=True, max_length=255, null=True)),
                ('meta_description', models.TextField(blank=True, null=True)),
                ('page_title', models.CharField(blank=True, max_length=255, null=True)),
                ('menu_title', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'cms_title',
            },
        ),
        migrations.CreateModel(
            name='CnpframeworkGroupacl',
            fields=[
                ('groupacl_id', models.AutoField(primary_key=True, serialize=False)),
                ('group_id', models.IntegerField(unique=True)),
                ('groupacl_model', models.CharField(max_length=50)),
                ('groupacl_filter', models.TextField()),
            ],
            options={
                'db_table': 'cnpframework_groupacl',
            },
        ),
        migrations.CreateModel(
            name='CnpframeworkLab',
            fields=[
                ('lab_id', models.AutoField(primary_key=True, serialize=False)),
                ('lab_name', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'cnpframework_lab',
            },
        ),
        migrations.CreateModel(
            name='CnpframeworkPerson',
            fields=[
                ('person_id', models.AutoField(primary_key=True, serialize=False)),
                ('person_first', models.CharField(max_length=60)),
                ('person_last', models.CharField(max_length=60)),
                ('person_pass', models.CharField(max_length=60)),
                ('person_email', models.CharField(max_length=255)),
                ('lab_id', models.IntegerField()),
                ('user_id', models.IntegerField(unique=True)),
            ],
            options={
                'db_table': 'cnpframework_person',
            },
        ),
        migrations.CreateModel(
            name='DjangoAuthopenidAssociation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('server_url', models.TextField()),
                ('handle', models.CharField(max_length=255)),
                ('secret', models.TextField()),
                ('issued', models.IntegerField()),
                ('lifetime', models.IntegerField()),
                ('assoc_type', models.TextField()),
            ],
            options={
                'db_table': 'django_authopenid_association',
            },
        ),
        migrations.CreateModel(
            name='DjangoAuthopenidNonce',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('server_url', models.CharField(max_length=255)),
                ('timestamp', models.IntegerField()),
                ('salt', models.CharField(max_length=40)),
            ],
            options={
                'db_table': 'django_authopenid_nonce',
            },
        ),
        migrations.CreateModel(
            name='DjangoAuthopenidUserassociation',
            fields=[
                ('openid_url', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('user_id', models.IntegerField()),
            ],
            options={
                'db_table': 'django_authopenid_userassociation',
            },
        ),
        migrations.CreateModel(
            name='FlyLegacysource',
            fields=[
                ('legacysource_id', models.AutoField(primary_key=True, serialize=False)),
                ('legacysource_name', models.CharField(max_length=30)),
            ],
            options={
                'db_table': 'fly_legacysource',
            },
        ),
        migrations.CreateModel(
            name='FlyLocation',
            fields=[
                ('location_id', models.AutoField(primary_key=True, serialize=False)),
                ('location_name', models.CharField(max_length=30)),
            ],
            options={
                'db_table': 'fly_location',
            },
        ),
        migrations.CreateModel(
            name='FlySource',
            fields=[
                ('source_id', models.AutoField(primary_key=True, serialize=False)),
                ('source_name', models.CharField(max_length=30)),
            ],
            options={
                'db_table': 'fly_source',
            },
        ),
        migrations.CreateModel(
            name='FlySpecie',
            fields=[
                ('specie_id', models.AutoField(primary_key=True, serialize=False)),
                ('specie_name', models.CharField(max_length=100)),
                ('specie_ncbitax', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'fly_specie',
            },
        ),
        migrations.CreateModel(
            name='FlyStock',
            fields=[
                ('stock_id', models.AutoField(primary_key=True, serialize=False)),
                ('stock_ccuid', models.CharField(blank=True, max_length=40, null=True)),
                ('specie_id', models.IntegerField()),
                ('stock_entrydate', models.DateTimeField()),
                ('stock_updated', models.DateTimeField()),
                ('stock_chrx', models.CharField(blank=True, max_length=60, null=True)),
                ('stock_chry', models.CharField(blank=True, max_length=60, null=True)),
                ('stock_bal1', models.CharField(blank=True, max_length=60, null=True)),
                ('stock_chr2', models.CharField(blank=True, max_length=60, null=True)),
                ('stock_bal2', models.CharField(blank=True, max_length=60, null=True)),
                ('stock_chr3', models.CharField(blank=True, max_length=60, null=True)),
                ('stock_bal3', models.CharField(blank=True, max_length=60, null=True)),
                ('stock_chr4', models.CharField(blank=True, max_length=60, null=True)),
                ('stock_chru', models.CharField(blank=True, max_length=230, null=True)),
                ('stock_comments', models.TextField(blank=True, null=True)),
                ('stock_hospital', models.IntegerField()),
                ('stock_died', models.IntegerField()),
                ('location_id', models.IntegerField(blank=True, null=True)),
                ('stock_loc1_location', models.CharField(blank=True, max_length=30, null=True)),
                ('stock_loc2_person_id', models.IntegerField(blank=True, null=True)),
                ('stock_loc3_data', models.CharField(blank=True, max_length=30, null=True)),
                ('lab_id', models.IntegerField()),
                ('legacysource_id', models.IntegerField()),
                ('stock_legacy1', models.CharField(blank=True, max_length=30, null=True)),
                ('stock_legacy2', models.CharField(blank=True, max_length=30, null=True)),
                ('stock_legacy3', models.CharField(blank=True, max_length=30, null=True)),
                ('stock_flydbid', models.CharField(blank=True, max_length=50, null=True)),
                ('stock_genotype', models.CharField(blank=True, max_length=255, null=True)),
                ('stock_print', models.CharField(blank=True, max_length=30, null=True)),
            ],
            options={
                'db_table': 'fly_stock',
            },
        ),
        migrations.CreateModel(
            name='FlyStockacl',
            fields=[
                ('acltable_id', models.AutoField(primary_key=True, serialize=False)),
                ('acltable_permissions', models.IntegerField()),
                ('acltable_read', models.IntegerField()),
                ('acltable_update', models.IntegerField()),
                ('acltable_delete', models.IntegerField()),
                ('acltable_nread', models.IntegerField()),
                ('acltable_nupdate', models.IntegerField()),
                ('acltable_ndelete', models.IntegerField()),
                ('group_id', models.IntegerField()),
                ('foreign_id', models.IntegerField()),
            ],
            options={
                'db_table': 'fly_stockacl',
            },
        ),
        migrations.CreateModel(
            name='FlySupplier',
            fields=[
                ('supplier_id', models.AutoField(primary_key=True, serialize=False)),
                ('supplier_name', models.CharField(max_length=50)),
                ('supplier_contact', models.CharField(blank=True, max_length=30, null=True)),
                ('supplier_email', models.CharField(blank=True, max_length=75, null=True)),
                ('supplier_url', models.CharField(blank=True, max_length=200, null=True)),
                ('supplier_address', models.TextField(blank=True, null=True)),
                ('supplier_notes', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'fly_supplier',
            },
        ),
        migrations.CreateModel(
            name='MenusCachekey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language', models.CharField(max_length=255)),
                ('site', models.PositiveIntegerField()),
                ('key', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'menus_cachekey',
            },
        ),
        migrations.CreateModel(
            name='RegistrationRegistrationprofile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField(unique=True)),
                ('activation_key', models.CharField(max_length=40)),
            ],
            options={
                'db_table': 'registration_registrationprofile',
            },
        ),
        migrations.CreateModel(
            name='SnippetSnippet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('html', models.TextField()),
                ('template', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'snippet_snippet',
            },
        ),
        migrations.CreateModel(
            name='SouthMigrationhistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_name', models.CharField(max_length=255)),
                ('migration', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'south_migrationhistory',
            },
        ),
        migrations.AlterUniqueTogether(
            name='flystockacl',
            unique_together={('group_id', 'foreign_id')},
        ),
        migrations.AlterUniqueTogether(
            name='cnpframeworkperson',
            unique_together={('person_first', 'person_last')},
        ),
        migrations.AlterUniqueTogether(
            name='cmstitle',
            unique_together={('page_id', 'language')},
        ),
        migrations.AlterUniqueTogether(
            name='cmspageplaceholders',
            unique_together={('page_id', 'placeholder_id')},
        ),
        migrations.AlterUniqueTogether(
            name='aclframeworkacltemplate',
            unique_together={('group_id', 'applyto_id', 'acltemplate_table_id')},
        ),
    ]
